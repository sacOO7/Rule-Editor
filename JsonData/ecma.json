[
  {
    "RuleName": "arrow-body-style",
    "Details": "require braces around arrow function bodies"
  },
  {
    "RuleName": "no-useless-computed-key",
    "Details": "disallow unnecessary computed property keys in object literals"
  },
  {
    "RuleName": "no-new-symbol",
    "Details": "disallow new operators with the Symbol object"
  },
  {
    "RuleName": "no-duplicate-imports",
    "Details": "disallow duplicate module imports"
  },
  {
    "RuleName": "yield-star-spacing",
    "Details": "require or disallow spacing around the * in yield* expressions"
  },
  {
    "RuleName": "no-useless-constructor",
    "Details": "disallow unnecessary constructors"
  },
  {
    "RuleName": "no-this-before-super",
    "Details": "disallow this/super before calling super() in constructors"
  },
  {
    "RuleName": "prefer-template",
    "Details": "require template literals instead of string concatenation"
  },
  {
    "RuleName": "prefer-rest-params",
    "Details": "require rest parameters instead of arguments"
  },
  {
    "RuleName": "no-confusing-arrow",
    "Details": "disallow arrow functions where they could be confused with comparisons"
  },
  {
    "RuleName": "constructor-super",
    "Details": "require super() calls in constructors"
  },
  {
    "RuleName": "prefer-const",
    "Details": "require const declarations for variables that are never reassigned after declared"
  },
  {
    "RuleName": "no-class-assign",
    "Details": "disallow reassigning class members"
  },
  {
    "RuleName": "prefer-arrow-callback",
    "Details": "require arrow functions as callbacks"
  },
  {
    "RuleName": "no-const-assign",
    "Details": "disallow reassigning const variables"
  },
  {
    "RuleName": "prefer-spread",
    "Details": "require spread operators instead of .apply()"
  },
  {
    "RuleName": "prefer-destructuring",
    "Details": "require destructuring from arrays and/or objects"
  },
  {
    "RuleName": "no-restricted-imports",
    "Details": "disallow specified modules when loaded by import"
  },
  {
    "RuleName": "no-var",
    "Details": "require let or const instead of var"
  },
  {
    "RuleName": "generator-star-spacing",
    "Details": "enforce consistent spacing around * operators in generator functions"
  },
  {
    "RuleName": "arrow-parens",
    "Details": "require parentheses around arrow function arguments"
  },
  {
    "RuleName": "require-yield",
    "Details": "require generator functions to contain yield"
  },
  {
    "RuleName": "no-dupe-class-members",
    "Details": "disallow duplicate class members"
  },
  {
    "RuleName": "template-curly-spacing",
    "Details": "require or disallow spacing around embedded expressions of template strings"
  },
  {
    "RuleName": "no-useless-rename",
    "Details": "disallow renaming import, export, and destructured assignments to the same name"
  },
  {
    "RuleName": "symbol-description",
    "Details": "require symbol descriptions"
  },
  {
    "RuleName": "arrow-spacing",
    "Details": "enforce consistent spacing before and after the arrow in arrow functions"
  },
  {
    "RuleName": "sort-imports",
    "Details": "enforce sorted import declarations within modules"
  },
  {
    "RuleName": "prefer-numeric-literals",
    "Details": "disallow parseInt() in favor of binary, octal, and hexadecimal literals"
  },
  {
    "RuleName": "object-shorthand",
    "Details": "require or disallow method and property shorthand syntax for object literals"
  },
  {
    "RuleName": "rest-spread-spacing",
    "Details": "enforce spacing between rest and spread operators and their expressions"
  }
]
